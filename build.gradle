plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.nagarro'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

jacoco {
	toolVersion = '0.8.7' // Use the latest version
}

repositories {
	mavenCentral()
}
configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'


	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-core:4.0.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}
	executionData fileTree(dir: project.buildDir, includes: ['jacoco/test.exec'])
}
task buildAndTest {
	dependsOn 'test'
	finalizedBy 'bootJar'

	doLast {
		if (project.tasks.test.state.failure) {
			throw new GradleException("Tests failed. Stopping the build process.")
		}
	}
}
bootJar {
	mainClass = 'com.nagarro.assessment.CurrencyExchangerApplication'
}
build.dependsOn buildAndTest
task copyJacocoReport(type: Copy) {
	dependsOn jacocoTestReport
	from "${buildDir}/reports/jacoco/test/html"
	into "${project.rootDir}/reports"
	include 'index.html', '**/*'
}
jacocoTestReport.finalizedBy(copyJacocoReport)